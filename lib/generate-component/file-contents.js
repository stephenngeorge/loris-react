const componentJsFile = (jsxName, machineName) => {
    return (
`import React from "react"
import PropTypes from "prop-types"

const ${jsxName} = ({
  additionalClasses
}) => {
  const classes = ["${machineName}", ...additionalClasses]
  return (
    <div className={\`$\{classes.join(" ")}\`}>

    </div>
  )
}

${jsxName}.propTypes = {
  additionalClasses: PropTypes.array
}

${jsxName}.defaultProps = {
  additionalClasses: []
}

export default ${jsxName}
`
    )
}

const componentSassFile = machineName => {
  return (
`.${machineName} {

}
`
    )
}

const componentTestFile = jsxName => {
  return (
`// this is a default file generated by loris that sets 
// up some simple testing behaviour for you. You may need 
// to reconfigure this file if, for example, your component 
// has some required props

import React from 'react'
import ReactDOM from 'react-dom'
import ${jsxName} from './${jsxName}'

it("renders without crashing", () => {
  const div = document.createElement("div")
  ReactDOM.render(<${jsxName}></${jsxName}>, div)
  ReactDOM.unmountComponentAtNode(div)
})
`
    )
}

const componentDataFile = () => {
  return (
`// this is a basic data file for housing all the props data
// that you will pass into this component. By default, loris has
// setup a "data" object for you. You should import it in the file 
// where you consume this component and then pass it to the relevant 
// component like this: {...data}
//
// you can also add and export as many other objects from this file
// as you like, this is a pattern we encourage. So if you had an instance
// of this component on the homepage, setup and export a "homepage" object
// and then an "aboutpage" object etc (or use whatever naming convention
// you like!)

const data = {
  // add props here that your component will expect in the format:
  // PropName: prop value
}

export {
  data
}`
    )
}

module.exports = {
  componentJsFile,
  componentSassFile,
  componentTestFile,
  componentDataFile
}